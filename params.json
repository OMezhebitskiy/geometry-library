{"name":"Geometry-library","tagline":"PHP Geometry Library provides utility functions for the computation of geometric data on the surface of the Earth. Code ported from Google Maps Android API.","body":"## Geometry Library Google Maps API V3 \r\nPHP Geometry Library provides utility functions for the computation of geometric data on the surface of the Earth. Code ported from Google [Maps Android API] (https://github.com/googlemaps/android-maps-utils/).\r\n\r\nFeatures\r\n------------\r\n* [Spherical] (https://developers.google.com/maps/documentation/javascript/reference#spherical) contains spherical geometry utilities allowing you to compute angles, distances and areas from latitudes and longitudes.\r\n* [Poly] (https://developers.google.com/maps/documentation/javascript/reference#poly) utility functions for computations involving polygons and polylines.\r\n* [Encoding] (https://developers.google.com/maps/documentation/javascript/reference#encoding) utilities for polyline encoding and decoding.\r\n\r\nDependency\r\n------------\r\n* [PHP 5] (http://php.net/)\r\n\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nIssue following command:\r\n\r\n```php\r\ncomposer require alexpechkarev/geometry-library:1.0\r\n```\r\n\r\nAlternatively  edit composer.json by adding following line and run **`composer update`**\r\n```php\r\n\"require\": { \r\n\t\t....,\r\n\t\t\"alexpechkarev/geometry-library\":\"1.0\",\r\n\t\r\n\t},\r\n```\r\n\r\nUsage\r\n------------\r\n\r\nHere is an example of using GeometryLibrary:\r\n```php\r\n$response =  \\GeometryLibrary\\SphericalUtil::computeHeading(\r\n                ['lat' => 25.775, 'lng' => -80.190], // from array [lat, lng]\r\n                ['lat' => 21.774, 'lng' => -80.190]); // to array [lat, lng]\r\n  echo $response; // -180\r\n  \r\n$response = \\GeometryLibrary\\SphericalUtil::computeDistanceBetween(\r\n              ['lat' => 25.775, 'lng' => -80.190], //from array [lat, lng]\r\n              ['lat' => 21.774, 'lng' => -80.190]); // to array [lat, lng]\r\n              \r\n  echo $response; // 444891.52998049          \r\n  \r\n  \r\n$response =  \\GeometryLibrary\\PolyUtil::isLocationOnEdge(\r\n              ['lat' => 25.774, 'lng' => -80.190], // point array [lat, lng]\r\n              [ // poligon arrays of [lat, lng]\r\n                ['lat' => 25.774, 'lng' => -80.190], \r\n                ['lat' => 18.466, 'lng' => -66.118], \r\n                ['lat' => 32.321, 'lng' => -64.757]\r\n              ])  ;\r\n              \r\n  echo $response; // true\r\n  \r\n  \r\n  \r\n$response =  \\GeometryLibrary\\PolyUtil::isLocationOnPath(\r\n              ['lat' => 25.771, 'lng' => -80.190], // point array [lat, lng]\r\n             [ // poligon arrays of [lat, lng]\r\n              ['lat' => 25.774, 'lng' => -80.190], \r\n              ['lat' => 18.466, 'lng' => -66.118], \r\n              ['lat' => 32.321, 'lng' => -64.757]\r\n             ]);  \r\n             \r\n  echo $response; // false  \r\n  \r\n$response =  \\GeometryLibrary\\PolyUtil::containsLocation(\r\n              ['lat' => 23.886, 'lng' => -65.269], // point array [lat, lng]\r\n             [ // poligon arrays of [lat, lng]\r\n                ['lat' => 25.774, 'lng' => -80.190], \r\n                ['lat' => 18.466, 'lng' => -66.118], \r\n                ['lat' => 32.321, 'lng' => -64.757]\r\n             ]);  \r\n             \r\n  echo $response; // false    \r\n  \r\n  \r\n$response =  \\GeometryLibrary\\PolyUtil::encode(\r\n              [ \r\n                ['lat' => 38.5, 'lng' => -120.2], \r\n                ['lat' => 40.7, 'lng' => -120.95], \r\n                ['lat' => 43.252, 'lng' => -126.453]\r\n              ]);\r\n              \r\n  echo $response; // '_p~iF~ps|U_ulLnnqC_mqNvxq`@'\r\n  \r\n  \r\n$response =  \\GeometryLibrary\\PolyUtil::decode('_p~iF~ps|U_ulLnnqC_mqNvxq`@');  \r\n\r\n  echo $response; /** array (size=3)\r\n                        0 => \r\n                          array (size=2)\r\n                            'lat' => float 38.5\r\n                            'lng' => float -120.2\r\n                        1 => \r\n                          array (size=2)\r\n                            'lat' => float 40.7\r\n                            'lng' => float -120.95\r\n                        2 => \r\n                          array (size=2)\r\n                            'lat' => float 43.252\r\n                            'lng' => float -126.453\r\n                   */\r\n  \r\n```\r\n\r\nAvailable methods\r\n------------\r\n##PolyUtil class\r\n* [`containsLocation($point, $polygon, $geodesic = false)`](#containsLocation)\r\n* [`isLocationOnEdge($point, $polygon, $tolerance = self::DEFAULT_TOLERANCE, $geodesic = true)`](#isLocationOnEdge)\r\n* [`isLocationOnPath($point, $polyline, $tolerance = self::DEFAULT_TOLERANCE, $geodesic = true)`](#isLocationOnPath)\r\n* [`decode($encodedPath)`](#decode)\r\n* [`encode($path)`](#encode)\r\n\r\n##SphericalUtil class\r\n* [`computeHeading($from, $to)`](#computeHeading)\r\n* [`computeOffset($from, $distance, $heading)`](#computeOffset)\r\n* [`computeOffsetOrigin($to, $distance,  $heading)`](#computeOffsetOrigin)\r\n* [`interpolate($from, $to, $fraction)`](#interpolate)\r\n* [`computeDistanceBetween( $from, $to)`](#computeDistanceBetween)\r\n* [`computeLength($path)`](#computeLength)\r\n* [`computeArea($path)`](#computeArea)\r\n* [`computeSignedArea($path)`](#computeSignedArea)\r\n\r\n\r\n---\r\n\r\n<a name=\"containsLocation\"></a>\r\n**`containsLocation( $point, $polygon, $geodesic = false )`** - To find whether a given point falls within a polygon\r\n\r\n* `$point` -  ['lat' => 38.5, 'lng' => -120.2 ]\r\n* `$polygon` - [ ['lat' => 38.5, 'lng' => -120.2], ['lat' => 40.7, 'lng' => -120.95], ['lat' => 43.252, 'lng' => -126.453]]\r\n* `$geodesic` - boolean\r\n\r\nReturns boolean\r\n\r\n```php\r\n\r\n$response =  \\GeometryLibrary\\PolyUtil::containsLocation(\r\n              ['lat' => 23.886, 'lng' => -65.269], // point array [lat, lng]\r\n             [ // poligon arrays of [lat, lng]\r\n                ['lat' => 25.774, 'lng' => -80.190], \r\n                ['lat' => 18.466, 'lng' => -66.118], \r\n                ['lat' => 32.321, 'lng' => -64.757]\r\n             ]);  \r\n             \r\n  echo $response; // false\r\n\r\n```\r\n---\r\n\r\n\r\n<a name=\"isLocationOnEdge\"></a>\r\n**`isLocationOnEdge( $point, $polygon, $tolerance = self::DEFAULT_TOLERANCE, $geodesic = true )`** - To determine whether a point falls on or near a polyline, or on or near the edge of a polygon, within a specified tolerance in meters.\r\n\r\n* `$point` -  ['lat' => 25.774, 'lng' => -80.190 ]\r\n* `$polygon` -  [ ['lat' => 38.5, 'lng' => -120.2], ['lat' => 40.7, 'lng' => -120.95], ['lat' => 43.252, 'lng' => -126.453]]\r\n* `$tolerance` -  tolerance value in degrees\r\n* `$geodesic` - boolean\r\n\r\nReturns boolean\r\n\r\n```php\r\n\r\n$response =  \\GeometryLibrary\\PolyUtil::isLocationOnEdge(\r\n              ['lat' => 25.774, 'lng' => -80.190], // point array [lat, lng]\r\n              [ // poligon arrays of [lat, lng]\r\n                ['lat' => 25.774, 'lng' => -80.190], \r\n                ['lat' => 18.466, 'lng' => -66.118], \r\n                ['lat' => 32.321, 'lng' => -64.757]\r\n              ])  ;\r\n              \r\n  echo $response; // true\r\n\r\n```\r\n---\r\n\r\n<a name=\"isLocationOnPath\"></a>\r\n**`isLocationOnPath( $point, $polygon, $tolerance = self::DEFAULT_TOLERANCE, $geodesic = true )`** - To determine whether a point falls on or near a polyline, within a specified tolerance in meters\r\n\r\n* `$point` -  ['lat' => 25.774, 'lng' => -80.190 ]\r\n* `$polygon` -  [ ['lat' => 38.5, 'lng' => -120.2], ['lat' => 40.7, 'lng' => -120.95], ['lat' => 43.252, 'lng' => -126.453]]\r\n* `$tolerance` -  tolerance value in degrees\r\n* `$geodesic` - boolean\r\n\r\nReturns boolean\r\n\r\n```php\r\n\r\n$response =  \\GeometryLibrary\\PolyUtil::isLocationOnPath(\r\n              ['lat' => 25.774, 'lng' => -80.190], // point array [lat, lng]\r\n              [ // poligon arrays of [lat, lng]\r\n                ['lat' => 25.774, 'lng' => -80.190], \r\n                ['lat' => 18.466, 'lng' => -66.118], \r\n                ['lat' => 32.321, 'lng' => -64.757]\r\n              ])  ;\r\n              \r\n  echo $response; // true\r\n\r\n```\r\n---\r\n\r\n<a name=\"decode\"></a>\r\n**`decode( $encodedPath )`** - Decodes an encoded path string into a sequence of LatLngs.\r\n\r\n* `$encodedPath` - string '_p~iF~ps|U_ulLnnqC_mqNvxq`@'\r\n\r\nReturns array\r\n\r\n```php\r\n\r\n$response =  \\GeometryLibrary\\PolyUtil::decode('_p~iF~ps|U_ulLnnqC_mqNvxq`@');  \r\n\r\n  echo $response; /** array (size=3)\r\n                        0 => \r\n                          array (size=2)\r\n                            'lat' => float 38.5\r\n                            'lng' => float -120.2\r\n                        1 => \r\n                          array (size=2)\r\n                            'lat' => float 40.7\r\n                            'lng' => float -120.95\r\n                        2 => \r\n                          array (size=2)\r\n                            'lat' => float 43.252\r\n                            'lng' => float -126.453\r\n                   */\r\n\r\n```\r\n---\r\n\r\n<a name=\"encode\"></a>\r\n**`encode( $path )`** - Encodes a sequence of LatLngs into an encoded path string.\r\n\r\n* `$path` -  [ ['lat' => 38.5, 'lng' => -120.2], ['lat' => 40.7, 'lng' => -120.95], ['lat' => 43.252, 'lng' => -126.453] ]\r\n\r\nReturns string\r\n\r\n```php\r\n\r\n$response =  \\GeometryLibrary\\PolyUtil::encode(\r\n              [ \r\n                ['lat' => 38.5, 'lng' => -120.2], \r\n                ['lat' => 40.7, 'lng' => -120.95], \r\n                ['lat' => 43.252, 'lng' => -126.453]\r\n              ]);\r\n              \r\n  echo $response; // '_p~iF~ps|U_ulLnnqC_mqNvxq`@'\r\n\r\n```\r\n---\r\n\r\n<a name=\"computeHeading\"></a>\r\n**`computeHeading( $from, $to )`** - Returns the heading from one LatLng to another LatLng.\r\n\r\n* `$from` -  ['lat' => 38.5, 'lng' => -120.2]\r\n* `$to` -  ['lat' => 40.7, 'lng' => -120.95]\r\n\r\nReturns int\r\n\r\n```php\r\n\r\n$response =  \\GeometryLibrary\\SphericalUtil::computeHeading(\r\n              ['lat' => 25.775, 'lng' => -80.190], \r\n              ['lat' => 21.774, 'lng' => -80.190]));\r\n              \r\n  echo $response; // -180\r\n\r\n```\r\n---\r\n\r\n<a name=\"computeOffset\"></a>\r\n**`computeOffset( $from, $distance, $heading )`** - Returns the LatLng resulting from moving a distance from an origin in the specified heading.\r\n\r\n* `$from` -  ['lat' => 38.5, 'lng' => -120.2]\r\n* `$distance` - number, the distance to travel\r\n* `$heading` - number, the heading in degrees clockwise from north\r\n\r\nReturns array\r\n\r\n```php\r\n\r\n$response =  \\GeometryLibrary\\SphericalUtil::computeOffset(['lat' => 25.775, 'lng' => -80.190], 152, 120);\r\n              \r\n  echo $response; /** array (size=2)\r\n                      'lat' => float 25.774316510639\r\n                      'lng' => float -80.188685385944\r\n                  */\r\n\r\n```\r\n---\r\n\r\n<a name=\"computeOffsetOrigin\"></a>\r\n**`computeOffsetOrigin( $from, $distance, $heading )`** - Returns the location of origin when provided with a LatLng destination, meters travelled and original heading. Headings are expressed in degrees clockwise from North. \r\n\r\n* `$from` -  ['lat' => 38.5, 'lng' => -120.2]\r\n* `$distance` - number, the distance to travel\r\n* `$heading` - number, the heading in degrees clockwise from north\r\n\r\nReturns array \r\n\r\n```php\r\n\r\n$response =  \\GeometryLibrary\\SphericalUtil::computeOffsetOrigin(['lat' => 25.775, 'lng' => -80.190], 152, 120);\r\n              \r\n  echo $response; /** array (size=2)\r\n                        'lat' => float 14.33435503928\r\n                        'lng' => float -263248.24242931\r\n                  */\r\n\r\n```\r\n---\r\n\r\n<a name=\"interpolate\"></a>\r\n**`interpolate( $from, $to, $fraction )`** - Returns the LatLng which lies the given fraction of the way between the origin LatLng and the destination LatLng.\r\n\r\n* `$from` -  ['lat' => 38.5, 'lng' => -120.2]\r\n* `$to` -  ['lat' => 38.5, 'lng' => -120.2]\r\n* `$fraction` - number, a fraction of the distance to travel\r\n\r\nReturns array\r\n\r\n```php\r\n\r\n$response =  \\GeometryLibrary\\SphericalUtil::interpolate(['lat' => 25.775, 'lng' => -80.190], \r\n                                                          ['lat' => 26.215, 'lng' => -81.218], 2);\r\n              \r\n  echo $response; /** array (size=2)\r\n                      'lat' => float 26.647635362403\r\n                      'lng' => float -82.253737943391\r\n                  */\r\n\r\n```\r\n---\r\n\r\n<a name=\"computeDistanceBetween\"></a>\r\n**`computeDistanceBetween( $from, $to )`** - Returns the distance, in meters, between two LatLngs. You can optionally specify a custom radius. The radius defaults to the radius of the Earth.\r\n\r\n* `$from` - ['lat' => 38.5, 'lng' => -120.2]\r\n* `$to` - ['lat' => 38.5, 'lng' => -120.2]\r\n\r\nReturns float\r\n\r\n```php\r\n\r\n$response =  \\GeometryLibrary\\SphericalUtil::computeDistanceBetween(['lat' => 25.775, 'lng' => -80.190], ['lat' => 26.215, 'lng' => -81.218]);\r\n              \r\n  echo $response; //float 113797.92421349\r\n\r\n```\r\n---\r\n\r\n<a name=\"computeLength\"></a>\r\n**`computeLength( $path )`** - Returns the length of the given path, in meters, on Earth.\r\n\r\n* `$path` - [ ['lat' => 38.5, 'lng' => -120.2], ['lat' => 40.7, 'lng' => -120.95], ['lat' => 43.252, 'lng' => -126.453] ]\r\n\r\nReturns float\r\n\r\n```php\r\n\r\n$response =  \\GeometryLibrary\\SphericalUtil::computeLength([ \r\n                ['lat' => 38.5, 'lng' => -120.2], \r\n                ['lat' => 40.7, 'lng' => -120.95], \r\n                ['lat' => 43.252, 'lng' => -126.453]\r\n              ]);\r\n              \r\n  echo $response; //float 788906.98459431\r\n\r\n```\r\n---\r\n\r\n<a name=\"computeArea\"></a>\r\n**`computeArea( $path )`** - Returns the area of a closed path.\r\n\r\n* `$path` - [ ['lat' => 38.5, 'lng' => -120.2], ['lat' => 40.7, 'lng' => -120.95], ['lat' => 43.252, 'lng' => -126.453] ]\r\n\r\nReturns float\r\n\r\n```php\r\n\r\n$response =  \\GeometryLibrary\\SphericalUtil::computeArea([ \r\n                ['lat' => 38.5, 'lng' => -120.2], \r\n                ['lat' => 40.7, 'lng' => -120.95], \r\n                ['lat' => 43.252, 'lng' => -126.453]\r\n              ]);\r\n              \r\n  echo $response; //float 44766785529.143\r\n\r\n```\r\n---\r\n\r\n<a name=\"computeSignedArea\"></a>\r\n**`computeSignedArea( $path )`** - Returns the signed area of a closed path.\r\n\r\n* `$path` - [ ['lat' => 38.5, 'lng' => -120.2], ['lat' => 40.7, 'lng' => -120.95], ['lat' => 43.252, 'lng' => -126.453] ]\r\n\r\nReturns float\r\n\r\n```php\r\n\r\n$response =  \\GeometryLibrary\\SphericalUtil::computeSignedArea([ \r\n                ['lat' => 38.5, 'lng' => -120.2], \r\n                ['lat' => 40.7, 'lng' => -120.95], \r\n                ['lat' => 43.252, 'lng' => -126.453]\r\n              ]);\r\n              \r\n  echo $response; //float 44766785529.143\r\n\r\n```\r\n---\r\n\r\nSupport\r\n-------\r\n\r\n[Please open an issue on GitHub](https://github.com/alexpechkarev/geometry-library/issues)\r\n\r\n\r\nLicense\r\n-------\r\n\r\nGeometry Library Google Maps API V3 is released under the MIT License. See the bundled\r\n[LICENSE](https://github.com/alexpechkarev/geometry-library/blob/master/LICENSE)\r\nfile for details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}